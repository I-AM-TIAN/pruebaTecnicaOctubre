# Ejemplo de Dockerfile Optimizado con Memoria Aumentada
# Usa este archivo si tu plataforma de despliegue usa Docker

# Etapa 1: Build
FROM node:20-alpine AS builder

# Aumentar memoria para Node.js
ENV NODE_OPTIONS="--max-old-space-size=512"

WORKDIR /app

# Copiar archivos de dependencias
COPY package*.json ./
COPY prisma ./prisma/

# Instalar dependencias (incluye postinstall para prisma generate)
RUN npm ci

# Copiar código fuente
COPY . .

# Build de la aplicación
RUN npm run build

# Etapa 2: Producción
FROM node:20-alpine AS production

# Aumentar memoria para Node.js en producción
ENV NODE_OPTIONS="--max-old-space-size=512"

WORKDIR /app

# Copiar package files
COPY package*.json ./
COPY prisma ./prisma/

# Instalar solo dependencias de producción
RUN npm ci --omit=dev && \
    npx prisma generate

# Copiar archivos compilados desde builder
COPY --from=builder /app/dist ./dist

# Variables de entorno de ejemplo (sobreescríbelas en tu plataforma)
ENV PORT=4001
ENV NODE_ENV=production

# Exponer puerto
EXPOSE 4001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4001/auth/validate', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Comando de inicio con memoria aumentada
CMD ["node", "--max-old-space-size=512", "dist/main"]
